<?php

function openex_init() {
	$css = <<<EOT
.date-selector-block {
    margin-top: 80px;
    margin-bottom: 10px;
}

.get-rates-button {
    margin-top: 10px;
}

.data-display {
	margin-top: 20px;
}
.data-display .container {
height: 400px;
margin: 0 auto;
}
#openexform .form-group {
margin-bottom: 0px;
}
EOT;

	drupal_add_css( '//cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.3.0/css/datepicker.min.css', array(
		'group' => CSS_DEFAULT,
		'type'  => 'external'
	) );
	drupal_add_css( $css, array(
		'group' => CSS_DEFAULT,
		'type'  => 'inline'
	) );
	drupal_add_js( '//cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.3.0/js/bootstrap-datepicker.min.js', array(
		'scope' => 'footer',
		'type'  => 'external'
	) );
	drupal_add_js( 'https://code.highcharts.com/highcharts.js', array(
		'scope' => 'footer',
		'type'  => 'external'
	) );
	drupal_add_js( 'http://code.highcharts.com/modules/exporting.js', array(
		'scope' => 'footer',
		'type'  => 'external'
	) );
	drupal_add_js( drupal_get_path( 'module', 'openex' ) . '/openex.js', array( 'scope' => 'footer' ) );
}

/**
 * Implements hook_theme().
 * Defines the theming capabilities provided by this module.
 */
function openex_theme( $existing, $type, $theme, $path ) {
	return array(
		'openex_form' => array(
			'render element' => 'form',
			'template'       => 'openex-form',
		),
	);
}

/**
 * Implements hook_menu().
 */
function openex_menu() {
	$items['openex_retrieve'] = array(
		'title'            => '',
		'page callback'    => 'openex_retrieve',
		'page arguments'   => array(),
		'access arguments' => array( 'access content' ),
		'type'             => MENU_CALLBACK
	);
	$items['openex_form']     = array(
		'View the sample form',
		'page callback'   => 'drupal_get_form',
		'page arguments'  => array( 'openex_form' ),
		'access callback' => TRUE,
		'type'            => MENU_NORMAL_ITEM
	);

	return $items;
}

function openex_form() {
	// Provide a text field.
	$form['start'] = array(
		'#type'       => 'textfield',
		'#required'   => TRUE,
		'#attributes' => array(
			'placeholder' => 'Start',
			'id'          => 'start-date',
			'class'       => array( 'input-sm' )
		),
		'#prefix'     => "",
		'#suffix'     => "",
	);
	// Provide a text field.
	$form['end'] = array(
		'#type'       => 'textfield',
		'#required'   => TRUE,
		'#attributes' => array(
			'placeholder' => 'End',
			'id'          => 'end-date',
			'class'       => array( 'input-sm' )
		),
	);

	$ch = curl_init( "http://openexchangerates.org/api/currencies.json" );
	curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 );
	$json    = curl_exec( $ch );
	$obj     = json_decode( $json, TRUE );
	$options = array();
	foreach ( $obj as $key => $value ) {
		$options[ $key ] = $key;
	}
	curl_close( $ch );
	$form['currency1'] = array(
		'#type'       => 'select',
		'#options'    => $options,
		'#attributes' => array(
			'id'    => 'base-currency',
			'class' => array( 'form-control' )
		),
	);
	$form['currency2'] = array(
		'#type'       => 'select',
		'#options'    => $options,
		'#attributes' => array(
			'id'    => 'symbol-currency',
			'class' => array( 'form-control' )
		),
	);
	$form['submit']    = array(
		'#type'       => 'button',
		'#value'      => t( 'Get Rates' ),
		'#attributes' => array(
			'class' => array(
				'get-rates-button',
				'btn btn-block',
				'btn-default'
			)
		),
	);

	return $form;
}


/**
 * Implements hook_block_info().
 * This hook declares what blocks are provided by the module.
 */
function openex_block_info() {
	$blocks['openex_form'] = array(
		// info: The name of the block.
		'info'  => t( 'Openex Form' ),
		// Block caching options (per role, per user, etc.)
		'cache' => DRUPAL_CACHE_PER_ROLE, // default
	);

	return $blocks;
}

/**
 * Implements hook_block_view().
 * This hook generates the contents of the blocks themselves.
 */
function openex_block_view( $delta = '' ) {
	// The $delta parameter tells us which block is being requested.
	$block = array();
	switch ( $delta ) {
		case 'openex_form':
			// The subject is displayed at the top of the block. Note that it
			// should be passed through t() for translation. The title configured
			// for the block using Drupal UI supercedes this one.
			$block['subject'] = t( '' );
			// The content of the block is typically generated by calling a custom
			// function.
			$form = drupal_get_form('openex_form');
			$block['content'] = theme( 'openex_form' , array('form' => $form));
			break;
	}

	return $block;
}

/**
 * get openexdata
 */
function openex_retrieve() {
	$file  = 'time-series.json';
	$appId = '8c0ead44445346f4b3b5588270304af2';
	if ( $_SERVER['REQUEST_METHOD'] === 'POST' ) {
		$start    = $_POST['start'];
		$end      = $_POST['end'];
		$base     = $_POST['base'];
		$symbols  = $_POST['symbol'];
		$cache_id = 'openex' . $start . $end . $base . $symbols;
		if ( $cache = cache_get( $cache_id ) ) {
			$json = $cache->data;
		} else {
			$ch = curl_init( "http://openexchangerates.org/api/{$file}?app_id={$appId}&start={$start}&end={$end}&base={$base}&symbols={$symbols}" );
			curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 );
			$json = curl_exec( $ch );
			curl_close( $ch );
			cache_set( $cache_id, $json, 'cache', time() + 360 );
		}
		print $json;
	}
}

